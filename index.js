// Generated by CoffeeScript 1.7.1
(function() {
  var AWS, EventEmitter, KinesisShard, KinesisStream, KinesisWrapper, async,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  async = require('async');

  AWS = require('aws-sdk');

  EventEmitter = require('events').EventEmitter;

  AWS.config.update({
    region: 'us-east-1'
  });

  KinesisWrapper = (function() {
    function KinesisWrapper(options) {
      this.kinesis = new AWS.Kinesis();
    }

    KinesisWrapper.prototype.stream = function(stream_name, options) {
      if (options == null) {
        options = {};
      }
      return new KinesisStream(this.kinesis, stream_name, options);
    };

    return KinesisWrapper;

  })();

  KinesisStream = (function(_super) {
    __extends(KinesisStream, _super);

    function KinesisStream(kinesis, stream_name, options) {
      if (options == null) {
        options = {};
      }
      this.options = options;
      this.kinesis = kinesis;
      this.stream_name = stream_name;
      this.shards = false;
      this.setup();
    }

    KinesisStream.prototype.setup = function() {
      return this.kinesis.describeStream({
        StreamName: this.stream_name
      }, (function(_this) {
        return function(err, data) {
          if (err) {
            throw err;
          }
          console.log('get stream info...');
          return async.map(data.StreamDescription.Shards, function(shard, cb) {
            return _this.kinesis.getShardIterator({
              ShardId: shard.ShardId,
              ShardIteratorType: _this.options.ShardIteratorType || 'LATEST',
              StreamName: data.StreamDescription.StreamName
            }, function(err, data) {
              return cb(err, data.ShardIterator);
            });
          }, function(err, shardIterators) {
            console.log('get shards...');
            _this.shards = shardIterators.map(function(i) {
              return new KinesisShard(_this.kinesis, i);
            });
            return _this.emit('getShards', null, _this.shards);
          });
        };
      })(this));
    };

    KinesisStream.prototype.getShards = function(cb) {
      var listener;
      if (this.shards) {
        return cb(null, this.shards);
      }
      listener = (function(_this) {
        return function(err, shards) {
          cb(null, shards);
          return _this.removeListener('getShards', listener);
        };
      })(this);
      return this.on('getShards', listener);
    };

    KinesisStream.prototype.getRecords = function(cb) {
      var listener;
      listener = (function(_this) {
        return function(err, shards) {
          shards.map(function(shard) {
            shard.setup();
            return shard.on('getRecords', cb);
          });
          return _this.emit('startGetRecords', shards);
        };
      })(this);
      if (this.shards) {
        return listener(this.shards);
      }
      return this.on('getShards', listener);
    };

    KinesisStream.prototype.putRecord = function(key, data, cb) {
      data = new Buffer(JSON.stringify(data)).toString('base64');
      return this.kinesis.putRecord({
        Data: data,
        PartitionKey: key,
        StreamName: this.stream_name
      }, function(err, data) {
        if (cb) {
          return cb(err, data);
        }
      });
    };

    return KinesisStream;

  })(EventEmitter);

  KinesisShard = (function(_super) {
    __extends(KinesisShard, _super);

    function KinesisShard(kinesis, iterator) {
      this.kinesis = kinesis;
      this.iterator = iterator;
      this.initialized = false;
    }

    KinesisShard.prototype.setup = function() {
      var _getRecords;
      if (this.initialized) {
        return;
      }
      this.initialized = true;
      _getRecords = (function(_this) {
        return function() {
          return _this.kinesis.getRecords({
            ShardIterator: _this.iterator
          }, function(err, data) {
            var records;
            if (err) {
              throw err;
            }
            _this.iterator = data.NextShardIterator;
            records = data.Records || [];
            if (records.length === 0) {
              return setTimeout(_getRecords, 1000);
            }
            records = records.map(function(record) {
              var val;
              val = JSON.parse(new Buffer(record.Data, 'base64').toString());
              return {
                key: record.PartitionKey,
                number: record.SequenceNumber,
                val: val
              };
            });
            _this.emit('getRecords', null, records);
            return _getRecords();
          });
        };
      })(this);
      return _getRecords();
    };

    KinesisShard.prototype.getRecords = function(cb) {
      this.on('getRecords', cb);
      return this.setup();
    };

    return KinesisShard;

  })(EventEmitter);

  module.exports = new KinesisWrapper({});

}).call(this);
